#!/bin/bash
. ./aws-setup || exit 1

if [[ -z $HE_PASSWORD ]]; then
	read -p "HE_PASSWORD: " he
	export HE_PASSWORD=$he
fi

aws ec2 describe-instances > /tmp/instances || exit 1

num=$(jq '.Reservations[].Instances | length' /tmp/instances)

if [[ $num != '' ]]; then
    set -x
    if jq -r '.Reservations[].Instances[].State.Name' /tmp/instances | grep -q -v terminated; then
	set +x
	printf '%s\n' "There's already an instance running. bailing out."
	printf "to terminate instance, run:\n"
	printf "aws ec2 terminate-instances --instance-id %s\n" $(jq '.Reservations[].Instances[].InstanceId' /tmp/instances)
	exit 1
    fi
    set +x
fi

cmd=(aws ec2 run-instances \
	 --image-id "ami-0f918f7e67a3323f0" \
	 --subnet-id "subnet-02e7f17ee115e10c6" \
	 --security-group-ids "sg-0128d952b93f65e45" \
	 --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=myinstance}]' \
	 --associate-public-ip-address \
	 --key-name ec2-test \
	 --instance-type "t2.micro" \
	 --user-data file://cloud-init.sh )

printf '%s\n' "${cmd[*]}"
read -p "run?(y/n)" ans
if [[ $ans == 'y' ]]; then
	if ! "${cmd[@]}" | tee /tmp/instances; then
		printf '%s\n' "couldn't create instance"
		exit 1;
	fi
fi

id=$(jq -r '.Instances[0].InstanceId' /tmp/instances)
ip=$(aws ec2 describe-instances \
	--instance-ids "$id"\
	--query 'Reservations[*].Instances[*].PublicIpAddress' \
	--output text)

curl	-d "hostname=ec2.ashwink.com.np" \
	-d "password=$HE_PASSWORD" \
	-d "myip=$ip" \
	"https://dyn.dns.he.net/nic/update"

